<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql数据库入门]]></title>
    <url>%2F2018%2F01%2F07%2Fmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[相关概念介绍MySQL为关系型数据库（Relational Database Management System）,所谓的关系型可以理解为“表格” 键（key）：表中用来识别某个特定人\物的方法，键的值在当前列中具有唯一性 windows下mysql的配置MySQL脚本的基本组成MySQL通过执行SQL脚本来完成对数据库的操作，该脚本由一条或者多条MySQL语句（SQL语句+扩展语句）组成，保存时脚本文件的后缀名为.sql MySQL中的数据类型三大数据类型：数字、日期\时间、字符串数据类型 整数：tinyint、smallint、mediumint、int、bigint 浮点型：float、 double、 real、 decimal日期和时间：date、time、datetime、timestamp、year字符串类型： 字符串: char、varchar 文本: tinytext、text、mediumtext、longtext 二进制(可用来存储图片、音乐等):tinyblob、blob、mediumblob、longblob 使MySQL数据库登录 mysql - h 主机名 -u 用户名 -p mysql -u root -p 创建一个数据库 create database 数据库名 [其它选项]; 选择所要操作的数据库 两种方法： 在登录数据库时指定, 命令:mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p例如mysql -D samp_db -u root -p 在登录后使用 use 语句指定, 命令:use 数据库名;use 语句可以不加分号, 执行 use samp_db 来选择刚刚创建的数据库, 选择成功后会提示: Database changed 创建数据库表使用create table语句可完成对表格的创建create table 表名称（列名称）; 操作MySQL数据库向表中插入数据 insert语句可以用来将一行或者多行数据插入到数据库表中，其中一般的形式如下： insert [into] 表名[列名1，列名2，列名3...] value (值1，值2，值3,...) 查询表中的数据 select语句： select 列名称 from 表名称 [查询条件]； 按特定条件查询 where关键词用于指定查询条件，用法形式： select 列名称 from 表名称 where 条件; 更新表中的数据 update 表名称 set 列名称 = 新值 where 更新条件; 删除表中的数据 delete 语句： delete from 表名称 where 删除条件; 创建表后的修改添加列 基本形式： alter table 表名 add 列名 列数据类型 [after 插入位置]; 修改列 alter table 表名 change 列名称 列新名称 新数据类型; 删除列 alter table 表名 drop 列名称; 重命名表 alter table 表名 rename 新表名; 删除整张表 drop table 表名; 删除整个数据库 drop database 数据库名; emmmmm,未完待续]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web前端和移动前端]]></title>
    <url>%2F2018%2F01%2F07%2F%E5%89%8D%E7%AB%AF%E5%92%8C%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[区别直接上一张图 前端前端是个很大的概念，我的理解是用户能够看到，直接接触到的层面都算是前端，比如IOS客户端界面，安卓客户端界面，网页界面，甚至PC/MAC 桌面端软件界面；现在最常见的说法一般是指Web前端，也就是针对于网页端开发的工作。 Web App：指的是【Web application】，也就是以浏览器作为客户端的软件。 Mobile Web App ：当然就是指在手机端打开的Web App啦。 移动客户端的开发类型 Native App（原生APP）：也就是完全使用移动设备系统语言写的客户端，iPhone iPad就是纯Object-C，安卓就是纯JAVA, 就是用户看到的界面啦体验到的交互啦都是原生的。这是性能最棒的开发方式，但灵活性就没下面的好。 Web App：这个就是在移动浏览器里打开的，纯HTML+CSS+JS，说白了就是个网页，只不过非常的富应用，比如手机浏览器访问的GMAIL啥啥的。但说白了就是在浏览器里打开的页面。。IOS支持可以在桌面创建访问的快捷方式，但是说到底还是打开Safari跑。。而且对设备硬件的接口什么的挺薄弱。 Hybrid App：[HTML5 in mobile devices] 我觉得这个更为合适一些。实际上是使用原生写了一个容器，然后使用HTML+CSS+JS来实现用户界面和交互。Web App的短处便可以克服（因为自己写的容器可以辅助暴露偏底层的接口，比如本地存储或者麦克风控制之类），同时比起纯原生的java或者object-c开发灵活性要高（更新可以更快更迅速，也不依赖于市场，因为说白了，就是自己下载更新网页资源。。）实际上这种方式已经不限于移动端。。豌豆荚其实是个pc端的hybrid app 哇~~~ 而且说实在的，桌面开发的性能就现在来说要比移动好很多。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用方法小结]]></title>
    <url>%2F2018%2F01%2F06%2Fgit-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[创建新仓库 创建新的文件夹，打开，然后执行 git init 从而创建新的git仓库 检出仓库 执行下面的命令以创建一个本地仓库的克隆版本 git clone /path/to/repository 如果是远程服务器上的仓库，你的命令会是这样子 git clone username@host:/path/to/repository 工作流 本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它拥有实际文件；第二个是缓存区（index）,它像个缓存区域，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果 添加和提交 把它们添加到缓存区，使用下面的命令,右键该文件 git add . 使用以下命令以实际提交改动： git commit -m &quot;代码提交信息&quot; 现在，改动已经提交到HEAD，但是还没有到你的远程仓库 推送改动 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库 git push origin master可以把 master 换成你想要推送的任何分支。 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加： git remote add origin &lt;server&gt;如此你就能够将你的改动推送到所添加的服务器上去了。 分支 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将他们合并到主分支上 创建一个叫做“feature_x”的分支，并切换过去： git checkout -b feature_x 切换回主分支 git checkout master 再把新建的分支删除掉 git branch -d feature_x 除非你将分支推送到远程仓库，不然该分支就是不为他人所看到的 git push origin &lt;branch&gt; 合并与更新 要更新你的本地仓库至最新改动，执行： git pull 以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master），执行： git merge &lt;branch&gt; 两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功： git add &lt;filename&gt; 在合并改动之前，也可以使用如下命令查看： git diff &lt;source_branch&gt; &lt;target_branch&gt; 标签 在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签： git tag 1.0.0 1b2e1d63ff 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID： git log 你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 替换本地改动 假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动： git checkout -- &lt;filename&gt; 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它： git fetch origingit reset --hard origin/master 有用的贴士 内建的图形化 git： gitk 彩色的 git 输出： git config color.ui true 显示历史记录时，只显示一行注释信息： git config format.pretty oneline 交互地添加文件至缓存区： git add -i 参考文章]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常用方法</tag>
        <tag>git总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo搭建属于自己的博客]]></title>
    <url>%2F2018%2F01%2F06%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用hexo搭建博客 很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。 决定明天将自己简书上面的文章迁移到自己的博客上来（不得不说是一个大工程） 参考资料： Hexo+Github pages 创建一个属于自己的博客]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo入门使用</tag>
      </tags>
  </entry>
</search>
