<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git 常用方法小结]]></title>
    <url>%2F2018%2F01%2F06%2Fgit-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[创建新仓库 创建新的文件夹，打开，然后执行 git init 从而创建新的git仓库 检出仓库 执行下面的命令以创建一个本地仓库的克隆版本 git clone /path/to/repository 如果是远程服务器上的仓库，你的命令会是这样子 git clone username@host:/path/to/repository 工作流 本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它拥有实际文件；第二个是缓存区（index）,它像个缓存区域，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果 添加和提交 把它们添加到缓存区，使用下面的命令,右键该文件 git add . 使用以下命令以实际提交改动： git commit -m &quot;代码提交信息&quot; 现在，改动已经提交到HEAD，但是还没有到你的远程仓库 推送改动 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库 git push origin master可以把 master 换成你想要推送的任何分支。 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加： git remote add origin &lt;server&gt;如此你就能够将你的改动推送到所添加的服务器上去了。 分支 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将他们合并到主分支上 创建一个叫做“feature_x”的分支，并切换过去： git checkout -b feature_x 切换回主分支 git checkout master 再把新建的分支删除掉 git branch -d feature_x 除非你将分支推送到远程仓库，不然该分支就是不为他人所看到的 git push origin &lt;branch&gt; 合并与更新 要更新你的本地仓库至最新改动，执行： git pull 以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master），执行： git merge &lt;branch&gt; 两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功： git add &lt;filename&gt; 在合并改动之前，也可以使用如下命令查看： git diff &lt;source_branch&gt; &lt;target_branch&gt; 标签 在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签： git tag 1.0.0 1b2e1d63ff 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID： git log 你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 替换本地改动 假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动： git checkout -- &lt;filename&gt; 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它： git fetch origingit reset --hard origin/master 有用的贴士 内建的图形化 git： gitk 彩色的 git 输出： git config color.ui true 显示历史记录时，只显示一行注释信息： git config format.pretty oneline 交互地添加文件至缓存区： git add -i 参考文章]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常用方法</tag>
        <tag>git总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo搭建属于自己的博客]]></title>
    <url>%2F2018%2F01%2F06%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用hexo搭建博客 很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。 决定明天将自己简书上面的文章迁移到自己的博客上来（不得不说是一个大工程） 参考资料： Hexo+Github pages 创建一个属于自己的博客]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo入门使用</tag>
      </tags>
  </entry>
</search>
