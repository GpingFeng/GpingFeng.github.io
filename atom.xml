<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gping&#39;s Blog</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-07T09:34:38.799Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql数据库入门</title>
    <link href="http://yoursite.com/2018/01/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/01/07/mysql数据库入门/</id>
    <published>2018-01-07T09:30:31.000Z</published>
    <updated>2018-01-07T09:34:38.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关概念介绍"><a href="#相关概念介绍" class="headerlink" title="相关概念介绍"></a>相关概念介绍</h2><p>MySQL为关系型数据库（Relational Database Management System）,所谓的关系型可以理解为“表格”</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-6a67981b7a33aa6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="某班的学生信息中的相关概念"></p><ul><li>键（key）：表中用来识别某个特定人\物的方法，键的值在当前列中具有唯一性</li></ul><h2 id="windows下mysql的配置"><a href="#windows下mysql的配置" class="headerlink" title="windows下mysql的配置"></a>windows下mysql的配置</h2><h2 id="MySQL脚本的基本组成"><a href="#MySQL脚本的基本组成" class="headerlink" title="MySQL脚本的基本组成"></a>MySQL脚本的基本组成</h2><p>MySQL通过执行SQL脚本来完成对数据库的操作，该脚本由一条或者多条MySQL语句（SQL语句+扩展语句）组成，保存时脚本文件的后缀名为.sql</p><h2 id="MySQL中的数据类型"><a href="#MySQL中的数据类型" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h2><p>三大数据类型：数字、日期\时间、字符串<br>数据类型</p><ul><li>整数：tinyint、smallint、mediumint、int、bigint</li><li>浮点型：float、 double、 real、 decimal<br>日期和时间：date、time、datetime、timestamp、year<br>字符串类型：</li><li>字符串: char、varchar</li><li>文本: tinytext、text、mediumtext、longtext</li><li>二进制(可用来存储图片、音乐等):tinyblob、blob、mediumblob、longblob</li></ul><h2 id="使MySQL数据库"><a href="#使MySQL数据库" class="headerlink" title="使MySQL数据库"></a>使MySQL数据库</h2><p><strong>登录</strong></p><p>mysql - h 主机名 -u 用户名 -p</p><p><code>mysql -u root -p</code></p><p><strong>创建一个数据库</strong></p><p><code>create database 数据库名 [其它选项];</code></p><p><strong>选择所要操作的数据库</strong></p><p>两种方法：</p><ul><li><p>在登录数据库时指定, 命令:<br>mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p<br>例如<br><code>mysql -D samp_db -u root -p</code></p></li><li><p>在登录后使用 use 语句指定, 命令:<br>use 数据库名;<br>use 语句可以不加分号, 执行 use samp_db 来选择刚刚创建的数据库, 选择成功后会提示: Database changed</p></li></ul><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p>使用create table语句可完成对表格的创建<br><code>create table 表名称（列名称）;</code></p><h2 id="操作MySQL数据库"><a href="#操作MySQL数据库" class="headerlink" title="操作MySQL数据库"></a>操作MySQL数据库</h2><p><strong>向表中插入数据</strong></p><p>insert语句可以用来将一行或者多行数据插入到数据库表中，其中一般的形式如下：</p><p><code>insert [into] 表名[列名1，列名2，列名3...] value (值1，值2，值3,...)</code></p><p><strong>查询表中的数据</strong></p><p>select语句：</p><p><code>select 列名称 from 表名称 [查询条件]；</code></p><p><strong>按特定条件查询</strong></p><p>where关键词用于指定查询条件，用法形式：</p><p><code>select 列名称 from 表名称 where 条件;</code></p><p><strong>更新表中的数据</strong></p><p><code>update 表名称 set 列名称 = 新值 where 更新条件;</code></p><p><strong>删除表中的数据</strong></p><p>delete 语句：</p><p><code>delete from 表名称 where 删除条件;</code></p><h2 id="创建表后的修改"><a href="#创建表后的修改" class="headerlink" title="创建表后的修改"></a>创建表后的修改</h2><p><strong>添加列</strong></p><p>基本形式：</p><p><code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code></p><p><strong>修改列</strong></p><p><code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p><p><strong>删除列</strong></p><p><code>alter table 表名 drop 列名称;</code></p><p><strong>重命名表</strong></p><p><code>alter table 表名 rename 新表名;</code></p><p><strong>删除整张表</strong></p><p><code>drop table 表名;</code></p><p><strong>删除整个数据库</strong></p><p><code>drop database 数据库名;</code></p><p>emmmmm,未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关概念介绍&quot;&gt;&lt;a href=&quot;#相关概念介绍&quot; class=&quot;headerlink&quot; title=&quot;相关概念介绍&quot;&gt;&lt;/a&gt;相关概念介绍&lt;/h2&gt;&lt;p&gt;MySQL为关系型数据库（Relational Database Management System）,所谓
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>web前端和移动前端</title>
    <link href="http://yoursite.com/2018/01/07/%E5%89%8D%E7%AB%AF%E5%92%8C%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF/"/>
    <id>http://yoursite.com/2018/01/07/前端和移动前端/</id>
    <published>2018-01-07T09:14:45.000Z</published>
    <updated>2018-01-07T09:20:39.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>直接上一张图</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-5d5102b6f48d0df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两个的关系和区别"></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端是个很大的概念，我的理解是用户能够看到，直接接触到的层面都算是前端，比如IOS客户端界面，安卓客户端界面，网页界面，甚至PC/MAC 桌面端软件界面；现在最常见的说法一般是指Web前端，也就是针对于网页端开发的工作。</p><a id="more"></a><ul><li><p><strong>Web App：</strong>指的是【<a href="http://en.wikipedia.org/wiki/Web_application" target="_blank" rel="noopener">Web application</a>】，也就是以浏览器作为客户端的软件。</p></li><li><p><strong>Mobile Web App ：</strong>当然就是指在手机端打开的Web App啦。</p></li></ul><h2 id="移动客户端的开发类型"><a href="#移动客户端的开发类型" class="headerlink" title="移动客户端的开发类型"></a>移动客户端的开发类型</h2><ul><li><p><strong>Native App（原生APP）：</strong>也就是完全使用移动设备系统语言写的客户端，iPhone iPad就是纯Object-C，安卓就是纯JAVA, 就是用户看到的界面啦体验到的交互啦都是原生的。这是性能最棒的开发方式，但灵活性就没下面的好。</p></li><li><p><strong>Web App：</strong>这个就是在移动浏览器里打开的，纯HTML+CSS+JS，说白了就是个网页，只不过非常的富应用，比如手机浏览器访问的GMAIL啥啥的。但说白了就是在浏览器里打开的页面。。IOS支持可以在桌面创建访问的快捷方式，但是说到底还是打开Safari跑。。而且对设备硬件的接口什么的挺薄弱。</p></li><li><p><strong>Hybrid App：</strong>[<a href="http://en.wikipedia.org/wiki/HTML5_in_mobile_devices#Hybrid_Mobile_Apps" target="_blank" rel="noopener">HTML5 in mobile devices</a>] 我觉得这个更为合适一些。实际上是使用原生写了一个容器，然后使用HTML+CSS+JS来实现用户界面和交互。Web App的短处便可以克服（因为自己写的容器可以辅助暴露偏底层的接口，比如本地存储或者麦克风控制之类），同时比起纯原生的java或者object-c开发灵活性要高（更新可以更快更迅速，也不依赖于市场，因为说白了，就是自己下载更新网页资源。。）实际上这种方式已经不限于移动端。。豌豆荚其实是个pc端的hybrid app 哇~~~ 而且说实在的，桌面开发的性能就现在来说要比移动好很多。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;p&gt;直接上一张图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1784460-5d5102b6f48d0df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;两个的关系和区别&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;p&gt;前端是个很大的概念，我的理解是用户能够看到，直接接触到的层面都算是前端，比如IOS客户端界面，安卓客户端界面，网页界面，甚至PC/MAC 桌面端软件界面；现在最常见的说法一般是指Web前端，也就是针对于网页端开发的工作。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git 常用方法小结</title>
    <link href="http://yoursite.com/2018/01/06/git-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/06/git-常用方法小结/</id>
    <published>2018-01-06T15:18:37.000Z</published>
    <updated>2018-01-06T15:49:52.768Z</updated>
    
    <content type="html"><![CDATA[<p><strong>创建新仓库</strong></p><p>创建新的文件夹，打开，然后执行</p><p><code>git init</code></p><p>从而创建新的git仓库</p><p><strong>检出仓库</strong></p><p>执行下面的命令以创建一个本地仓库的克隆版本</p><p><code>git clone /path/to/repository</code></p><p>如果是远程服务器上的仓库，你的命令会是这样子</p><p><code>git clone username@host:/path/to/repository</code></p><p><strong>工作流</strong></p><p>本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它拥有实际文件；第二个是缓存区（index）,它像个缓存区域，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-0a1979f35d37f158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工作流"></p><p><strong>添加和提交</strong></p><p>把它们添加到缓存区，使用下面的命令,右键该文件</p><p><code>git  add .</code></p><p>使用以下命令以实际提交改动：</p><p><code>git commit -m &quot;代码提交信息&quot;</code></p><p>现在，改动已经提交到HEAD，但是还没有到你的远程仓库</p><p><strong>推送改动</strong></p><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库</p><p><code>git push origin master</code><br>可以把 <em>master</em> 换成你想要推送的任何分支。 </p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><p><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p><p><strong>分支</strong></p><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将他们合并到主分支上</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-c167bec19c386efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>创建一个叫做“feature_x”的分支，并切换过去：</p><p><code>git checkout -b feature_x</code></p><p>切换回主分支</p><p><code>git checkout master</code></p><p>再把新建的分支删除掉</p><p><code>git branch -d feature_x</code></p><p>除非你将分支推送到远程仓库，不然该分支就是不为他人所看到的</p><p><code>git push origin &lt;branch&gt;</code></p><p><strong>合并与更新</strong></p><p>要更新你的本地仓库至最新改动，执行：</p><p><code>git pull</code></p><p>以在你的工作目录中 <em>获取（fetch）</em> 并 <em>合并（merge）</em> 远端的改动。要合并其他分支到你的当前分支（例如 master），执行：</p><p><code>git merge &lt;branch&gt;</code></p><p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 <em>冲突（conflicts）</em>。 这时候就需要你修改这些文件来人肉合并这些 <em>冲突（conflicts）</em> 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><p><code>git add &lt;filename&gt;</code></p><p>在合并改动之前，也可以使用如下命令查看：</p><p> <code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><p><strong>标签</strong></p><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 <em>1.0.0</em> 的标签：</p><p><code>git tag 1.0.0 1b2e1d63ff</code></p><p><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p><p><code>git log</code></p><p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p><p><strong>替换本地改动</strong></p><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p><p><code>git checkout -- &lt;filename&gt;</code></p><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p><p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p><p><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p><p><strong>有用的贴士</strong></p><p>内建的图形化 git：</p><p><code>gitk</code></p><p>彩色的 git 输出：</p><p><code>git config color.ui true</code></p><p>显示历史记录时，只显示一行注释信息：</p><p><code>git config format.pretty oneline</code></p><p>交互地添加文件至缓存区：</p><p><code>git add -i</code></p><p><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;创建新仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建新的文件夹，打开，然后执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从而创建新的git仓库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检出仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行下面的命令
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git常用方法" scheme="http://yoursite.com/tags/git%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
      <category term="git总结" scheme="http://yoursite.com/tags/git%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建属于自己的博客</title>
    <link href="http://yoursite.com/2018/01/06/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/06/使用hexo搭建属于自己的博客/</id>
    <published>2018-01-06T13:01:04.000Z</published>
    <updated>2018-01-06T15:50:07.938Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用hexo搭建博客</strong></p><p>很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。</p><p>决定明天将自己简书上面的文章迁移到自己的博客上来（不得不说是一个大工程）</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/0a234a805233" target="_blank" rel="noopener">Hexo+Github pages 创建一个属于自己的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;使用hexo搭建博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。&lt;/p&gt;
&lt;p&gt;决定明天将自己简书
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo入门使用" scheme="http://yoursite.com/tags/Hexo%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
