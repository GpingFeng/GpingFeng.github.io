<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gping&#39;s Blog</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-06T15:49:52.768Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 常用方法小结</title>
    <link href="http://yoursite.com/2018/01/06/git-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/06/git-常用方法小结/</id>
    <published>2018-01-06T15:18:37.000Z</published>
    <updated>2018-01-06T15:49:52.768Z</updated>
    
    <content type="html"><![CDATA[<p><strong>创建新仓库</strong></p><p>创建新的文件夹，打开，然后执行</p><p><code>git init</code></p><p>从而创建新的git仓库</p><p><strong>检出仓库</strong></p><p>执行下面的命令以创建一个本地仓库的克隆版本</p><p><code>git clone /path/to/repository</code></p><p>如果是远程服务器上的仓库，你的命令会是这样子</p><p><code>git clone username@host:/path/to/repository</code></p><p><strong>工作流</strong></p><p>本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它拥有实际文件；第二个是缓存区（index）,它像个缓存区域，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-0a1979f35d37f158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工作流"></p><p><strong>添加和提交</strong></p><p>把它们添加到缓存区，使用下面的命令,右键该文件</p><p><code>git  add .</code></p><p>使用以下命令以实际提交改动：</p><p><code>git commit -m &quot;代码提交信息&quot;</code></p><p>现在，改动已经提交到HEAD，但是还没有到你的远程仓库</p><p><strong>推送改动</strong></p><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库</p><p><code>git push origin master</code><br>可以把 <em>master</em> 换成你想要推送的任何分支。 </p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><p><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p><p><strong>分支</strong></p><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将他们合并到主分支上</p><p><img src="http://upload-images.jianshu.io/upload_images/1784460-c167bec19c386efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>创建一个叫做“feature_x”的分支，并切换过去：</p><p><code>git checkout -b feature_x</code></p><p>切换回主分支</p><p><code>git checkout master</code></p><p>再把新建的分支删除掉</p><p><code>git branch -d feature_x</code></p><p>除非你将分支推送到远程仓库，不然该分支就是不为他人所看到的</p><p><code>git push origin &lt;branch&gt;</code></p><p><strong>合并与更新</strong></p><p>要更新你的本地仓库至最新改动，执行：</p><p><code>git pull</code></p><p>以在你的工作目录中 <em>获取（fetch）</em> 并 <em>合并（merge）</em> 远端的改动。要合并其他分支到你的当前分支（例如 master），执行：</p><p><code>git merge &lt;branch&gt;</code></p><p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 <em>冲突（conflicts）</em>。 这时候就需要你修改这些文件来人肉合并这些 <em>冲突（conflicts）</em> 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><p><code>git add &lt;filename&gt;</code></p><p>在合并改动之前，也可以使用如下命令查看：</p><p> <code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><p><strong>标签</strong></p><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 <em>1.0.0</em> 的标签：</p><p><code>git tag 1.0.0 1b2e1d63ff</code></p><p><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p><p><code>git log</code></p><p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p><p><strong>替换本地改动</strong></p><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p><p><code>git checkout -- &lt;filename&gt;</code></p><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p><p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p><p><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p><p><strong>有用的贴士</strong></p><p>内建的图形化 git：</p><p><code>gitk</code></p><p>彩色的 git 输出：</p><p><code>git config color.ui true</code></p><p>显示历史记录时，只显示一行注释信息：</p><p><code>git config format.pretty oneline</code></p><p>交互地添加文件至缓存区：</p><p><code>git add -i</code></p><p><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;创建新仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建新的文件夹，打开，然后执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从而创建新的git仓库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检出仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行下面的命令
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git常用方法" scheme="http://yoursite.com/tags/git%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
      <category term="git总结" scheme="http://yoursite.com/tags/git%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建属于自己的博客</title>
    <link href="http://yoursite.com/2018/01/06/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/06/使用hexo搭建属于自己的博客/</id>
    <published>2018-01-06T13:01:04.000Z</published>
    <updated>2018-01-06T15:50:07.938Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用hexo搭建博客</strong></p><p>很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。</p><p>决定明天将自己简书上面的文章迁移到自己的博客上来（不得不说是一个大工程）</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/0a234a805233" target="_blank" rel="noopener">Hexo+Github pages 创建一个属于自己的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;使用hexo搭建博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很久就想搭建一个属于自己的博客了，之前能力不足（还有偷懒一直没有折腾），今天趁着周末放假，使用了Hexo与Github Pages搭建一个属于自己的个人博客，并成功部署。&lt;/p&gt;
&lt;p&gt;决定明天将自己简书
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo入门使用" scheme="http://yoursite.com/tags/Hexo%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
